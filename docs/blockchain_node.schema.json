{
  "$schema": "https://rawgit.com/helium/blockchain-node/master/docs/blockchain_node.schema.json",
  "jrgen": "1.1",
  "jsonrpc": "2.0",
  "info": {
    "title": "blockchain_node",
    "description": [
      "An API to the Helium blockchain-node.",
      "This api follows the json-rpc 2.0 specification. More information available at http://www.jsonrpc.org/specification."
    ],
    "version": "1.0"
  },
  "definitions": {
    "height": {
      "type": "number",
      "description": "Block height"
    },
    "block": {
      "type": "object",
      "description": "Block details",
      "properties": {
        "hash": {
          "type": "string",
          "description": "Hash of block",
          "example": "vX_PzD2DvIQZPlpM_LiDCCewpWuZkwcdAhjnJXeg5Gk"
        },
        "height": {
          "type": "number",
          "description": "Height of block",
          "example": 318492
        },
        "prev_hash": {
          "type": "string",
          "description": "Hash of previous block",
          "example": "OLv5ah-94zg3ySJK5x50-W6Kw4gd510ikhpbByq37ZU"
        },
        "time": {
          "type": "number",
          "description": "Time of block in seconds from epoch",
          "example": 1588558709
        },
        "transactions": {
          "type": "array",
          "description": "Block transaction descriptions",
          "items": {
            "description": "Transaction hash",
            "type": "object",
            "properties": {
              "hash": {
                "type": "string",
                "description": "Transaction hash"
              },
              "type": {
                "type": "string",
                "description": "Transaction type"
              }
            }
          },
          "example": [
            {
              "hash": "UOVRPuEO2IE8y9fxiuO9JBcBLrqP0Hbh7cUqt-n_8QE",
              "type": "poc_request_v1"
            },
            {
              "hash": "67NdSWYjdE8LaR0DE_NNWqMr4XVK8hwrFJ616c9BPmE",
              "type": "poc_request_v1"
            },
            {
              "hash": "KfHpj8ytLV6bqNaMS8wbWXeqXkHxjS-G_U_AAUrFvSQ",
              "type": "poc_request_v1"
            },
            {
              "hash": "r4mgtbBnrY0v6_m01-akrUtZ7KSsLIF4XTJBIUWiaZs",
              "type": "poc_request_v1"
            },
            {
              "hash": "KMFPXYw9QYdW3mtciOuitcWm1qVknm5IDluckN7IcaY",
              "type": "poc_request_v1"
            },
            {
              "hash": "1cpS1AnemprqCmm8SHq9_S-eiCE6zjzf2QsOIaV4GgI",
              "type": "poc_request_v1"
            },
            {
              "hash": "1Rh4iR3eBQIIywqSQ0TCO04tdl2Dl7dW4qWng5q65Es",
              "type": "poc_request_v1"
            }
          ]
        }
      },
      "required": ["hash", "height", "prev_hash", "time", "transactions"]
    },
    "transaction": {
      "type": "object",
      "description": "Transaction details. The exact fields returned depend on the transaction type returned in the result.",
      "properties": {
        "hash": {
          "type": "string",
          "description": "B64 hash of the transaction"
        },
        "type": {
          "type": "string",
          "description": "The type of the transaction"
        },
        "implicit_burn": {
          "$ref": "#/definitions/implicit_burn"
        }
      },
      "required": ["type", "hash"]
    },
    "pending_transaction": {
      "type": "object",
      "description": "Pending transaction details. The exact fields returned depend on the transaction type returned in the result. The transaction will be absent if status is cleared or failed",
      "properties": {
        "txn": {
          "$ref": "#/definitions/transaction"
        },
        "status": {
          "type": "string",
          "description": "One of pending, cleared or failed"
        },
        "failed_reason": {
          "type": "string",
          "description": "Present during failed status"
        }
      },
      "required": ["status"]
    },
    "backup_info": {
      "type": "object",
      "properties": {
        "backup_id": {
          "type": "integer",
          "description": "ID of the backup",
          "example": 2
        },
        "number_files": {
          "type": "integer",
          "description": "Number of files in the backup",
          "example": 3
        },
        "size": {
          "type": "integer",
          "description": "Size of backup, in bytes"
        },
        "timestamp": {
          "type": "integer",
          "description": "Timestamp (seconds since epoch) of backup"
        }
      },
      "required": ["backup_id", "number_files", "size", "timestamp"]
    },
    "oracle_price": {
      "type": "object",
      "description": "Oracle Price",
      "properties": {
        "price": {
          "type": "number",
          "description": "The oracle price at the indicated height",
          "example": 131069500
        },
        "height": {
          "type": "number",
          "description": "The block height of the oracle price",
          "example": 633936
        }
      },
      "required": ["price", "height"]
    },
    "implicit_burn": {
      "type": "object",
      "description": "Implicit burn details",
      "properties": {
        "fee": {
          "type": "number",
          "description": "Amount of HNT (in bones) burned for the fee of the corresponding transaction",
          "example": 1401125
        },
        "payer": {
          "type": "string",
          "description": "Address of the account that paid the fee",
          "example": "1b93cMbumsxd2qgahdn7dZ19rzNJ7KxEHsLfT4zQXiS9YnbR39F"
        }
      },
      "required": ["fee", "payer"]
    },
    "htlc_receipt": {
      "type": "object",
      "description": "HTLC details",
      "properties": {
        "address": {
          "type": "string",
          "description": "B58 address of the HTLC",
          "example": "13BnsQ6rZVHXHxT8tgYX6njGxppkVEEcAxDdHV51Vwikrh8XBP9"
        },
        "balance": {
          "type": "number",
          "description": "Amount of HNT locked",
          "example": 10
        },
        "hashlock": {
          "type": "string",
          "description": "Hash to unlock HTLC",
          "example": "AQEFmiouhIzFHBeCyW4J3sBKvBD3m2yuktTxUf14cIo"
        },
        "payee": {
          "type": "string",
          "description": "Address of the payee",
          "example": "14zemQxLLimdTkHnpBU8f6o3DMmU9QfrreqsR1rYUF4tLveyc62"
        },
        "payer": {
          "type": "string",
          "description": "Address of the payer",
          "example": "13udMhCkD4RmVCKKtprt96UAEBMppT55fs1z9viS6Uha8EWSWGe"
        },
        "redeemed_at": {
          "type": "number",
          "description": "Block height at which HTLC was redeemed",
          "example": 930213
        },
        "timelock": {
          "type": "number",
          "description": "Number of blocks HTLC is locked for until payer can reclaim",
          "example": 100
        }
      },
      "required": [
        "address",
        "balance",
        "hashlock",
        "payee",
        "payer",
        "timelock"
      ]
    }
  },
  "methods": {
    "block_height": {
      "summary": "Gets the stored height of the blockchain.",
      "description": "Gets the stored height of the blockchain.",
      "tags": ["blocks"],
      "result": {
        "type": "number",
        "description": "Block height",
        "example": 318492
      }
    },
    "block_get": {
      "summary": "Get a block by height or hash.",
      "description": "Gets a block with it's transaction hashes given a block height or block hash.",
      "tags": ["blocks"],
      "params": {
        "type": "object",
        "properties": {
          "height": {
            "description": "Block height to fetch",
            "type": "number",
            "example": 318492
          },
          "hash": {
            "description": "Block hash to fetch",
            "type": "number"
          }
        }
      },
      "result": {
        "$ref": "#/definitions/block"
      },
      "errors": [
        {
          "code": -100,
          "description": "Block not found"
        },
        {
          "code": -150,
          "description": "Failed to get block"
        },
        {
          "code": -3602,
          "description": "Invalid parameter"
        }
      ]
    },
    "account_get": {
      "summary": "Get account details.",
      "description": "Get account details for a given account address.",
      "tags": ["accounts"],
      "params": {
        "type": "object",
        "properties": {
          "address": {
            "type": "string",
            "description": "B58 address of the account to fetch"
          }
        },
        "required": ["address"]
      },
      "result": {
        "type": "object",
        "description": "Account",
        "properties": {
          "address": {
            "type": "string",
            "description": "Address of the account",
            "example": "13Ya3s4k8dsbd1dey6dmiYbwk4Dk1MRFCi3RBQ7nwKnSZqnYoW5"
          },
          "balance": {
            "type": "number",
            "description": "HNT balance of the account in bones",
            "example": 1000
          },
          "mobile_balance": {
            "type": "number",
            "description": "MOBILE balance of the account in bones",
            "example": 1000
          },
          "iot_balance": {
            "type": "number",
            "description": "IOT balance of the account in bones",
            "example": 1000
          },
          "nonce": {
            "type": "number",
            "description": "The current nonce for the account",
            "example": 3
          },
          "speculative_nonce": {
            "type": "number",
            "description": "The larger of the maximum pending balance nonce or the current nonce",
            "example": 12
          },
          "dc_balance": {
            "type": "number",
            "description": "Data credit balance of the account",
            "example": 0
          },
          "dc_nonce": {
            "type": "number",
            "description": "The current data credit nonce for the account",
            "example": 0
          },
          "sec_balance": {
            "type": "number",
            "description": "Security token balance of the account",
            "example": 0
          },
          "sec_nonce": {
            "type": "number",
            "description": "The current security token nonce for the account (deprecated).",
            "example": 0
          },
          "sec_speculative_nonce": {
            "type": "number",
            "description": "The larger of the maximum pending security nonce or the current security token nonce for the account (deprecated)",
            "example": 0
          },
          "staked_balance": {
            "type": "number",
            "description": "Staked HNT balance of the account",
            "example": 0
          },
          "cooldown_balance": {
            "type": "number",
            "description": "Staked HNT balance of the account currently in cooldown",
            "example": 0
          }
        },
        "required": [
          "address",
          "balance",
          "speculative_nonce",
          "nonce",
          "dc_balance",
          "dc_nonce",
          "sec_balance",
          "iot_balance",
          "mobile_balance",
          "staked_balance",
          "cooldown_balance"
        ]
      }
    },
    "transaction_get": {
      "summary": "Get transaction details.",
      "description": "Get details for a given transaction hash.",
      "tags": ["transactions"],
      "params": {
        "type": "object",
        "properties": {
          "hash": {
            "type": "string",
            "description": "B64 hash of the transaction to fetch"
          }
        },
        "required": ["hash"]
      },
      "result": {
        "$ref": "#/definitions/transaction"
      },
      "errors": [
        {
          "code": -100,
          "description": "Transaction not found"
        },
        {
          "code": -150,
          "description": "Failed to get transaction"
        }
      ]
    },
    "oracle_price_current": {
      "summary": "Gets the current oracle price.",
      "description": "Gets the oracle price at the current height of the blockchain.",
      "tags": ["oracles"],
      "result": {
        "$ref": "#/definitions/oracle_price"
      }
    },
    "oracle_price_get": {
      "summary": "Gets an oracle price at a height.",
      "description": "Gets the oracle price at the given height of the blockchain (if known).",
      "tags": ["oracles"],
      "params": {
        "type": "object",
        "properties": {
          "height": {
            "type": "number",
            "description": "Block height to get the oracle price for."
          }
        },
        "required": ["height"]
      },
      "result": {
        "$ref": "#/definitions/oracle_price"
      }
    },
    "pending_transaction_get": {
      "summary": "Get a pending transaction.",
      "description": "Get the previously submitted transaction with status.",
      "tags": ["pending transactions"],
      "params": {
        "type": "object",
        "properties": {
          "hash": {
            "type": "string",
            "description": "B64 hash of the pending transaction to fetch",
            "example": "xG-KdomBEdp4gTiJO1Riif92DoMd5hPxadcSci05pIs"
          }
        },
        "required": ["hash"]
      },
      "result": {
        "$ref": "#/definitions/pending_transaction"
      },
      "errors": [
        {
          "code": -100,
          "description": "Pending transaction not found"
        }
      ]
    },
    "pending_transaction_status": {
      "summary": "Get pending transaction status.",
      "description": "Get the status a previously submitted transaction.",
      "tags": ["pending transactions"],
      "params": {
        "type": "object",
        "properties": {
          "hash": {
            "type": "string",
            "description": "B64 hash of the pending transaction to fetch",
            "example": "xG-KdomBEdp4gTiJO1Riif92DoMd5hPxadcSci05pIs"
          }
        },
        "required": ["hash"]
      },
      "result": {
        "type": "string",
        "description": "One of 'pending', 'cleared', 'not_found' or a failure reason",
        "example": "cleared"
      },
      "errors": [
        {
          "code": -100,
          "description": "Pending transaction not found"
        }
      ]
    },
    "pending_transaction_submit": {
      "summary": "Submit a transaction to the pending queue.",
      "description": "Submits a pending transaction to the pending queue. The transactions needs to be in a blockchain_txn envelope and base64 encoded",
      "tags": ["pending transactions"],
      "params": {
        "type": "object",
        "properties": {
          "txn": {
            "type": "string",
            "description": "B64 encoded transaction",
            "example": "QoWBCIe..."
          }
        },
        "required": ["txn"]
      },
      "result": {
        "$ref": "#/definitions/transaction"
      },
      "errors": [
        {
          "code": -3602,
          "description": "Invalid parameter"
        }
      ]
    },
    "pending_transaction_verify": {
      "summary": "Verify a transaction prior to submitting to the pending queue.",
      "description": "Verifies a transaction prior to submitting to the pending queue. The transactions needs to be in a blockchain_txn envelope and base64 encoded. Result returns \"valid\" if the transaction is valid; otherwise, the error message is present.",
      "tags": ["pending transactions"],
      "params": {
        "type": "object",
        "properties": {
          "txn": {
            "type": "string",
            "description": "B64 encoded transaction",
            "example": "QoWBCIe..."
          }
        },
        "required": ["txn"]
      },
      "result": "string",
      "errors": [
        {
          "code": -3602,
          "description": "Invalid parameter"
        }
      ]
    },
    "implicit_burn_get": {
      "summary": "Gets an implicit burn for a transaction hash.",
      "description": "Gets an implicit burn for a transaction hash. Returns amount of HNT burned for a DC fee.",
      "tags": ["transactions"],
      "params": {
        "type": "object",
        "properties": {
          "hash": {
            "type": "string",
            "description": "Transaction hash to get implicit burn for.",
            "example": "13BnsQ6rZVHXHxT8tgYX6njGxppkVEEcAxDdHV51Vwikrh8XBP9"
          }
        },
        "required": ["hash"]
      },
      "result": {
        "$ref": "#/definitions/implicit_burn"
      },
      "errors": [
        {
          "code": -100,
          "description": "Implicit burn not found for transaction"
        }
      ]
    },
    "htlc_get": {
      "summary": "Gets HTLC details for an HTLC address.",
      "description": "Gets HTLC details for an HTLC address. If an HTLC was redeemed, it will also show the redemption height.",
      "tags": ["htlc"],
      "params": {
        "type": "object",
        "properties": {
          "address": {
            "type": "string",
            "description": "HTLC address",
            "example": "13BnsQ6rZVHXHxT8tgYX6njGxppkVEEcAxDdHV51Vwikrh8XBP9"
          }
        },
        "required": ["address"]
      },
      "result": {
        "$ref": "#/definitions/htlc_receipt"
      },
      "errors": [
        {
          "code": -100,
          "description": "HTLC not found"
        }
      ]
    },
    "wallet_create": {
      "summary": "Create a new wallet.",
      "description": "Creates a new wallet, encrypted with the given password. The wallet is locked after creation.",
      "tags": ["wallets"],
      "params": {
        "type": "object",
        "properties": {
          "password": {
            "type": "string",
            "description": "Password used to encrypt the wallet",
            "example": "a password"
          }
        },
        "required": ["password"]
      },
      "result": {
        "type": "string",
        "description": "The B58 encoded public address of the wallet",
        "example": "13Ya3s4k8dsbd1dey6dmiYbwk4Dk1MRFCi3RBQ7nwKnSZqnYoW5"
      }
    },
    "wallet_delete": {
      "summary": "Delets a wallet.",
      "description": "Permanently removes the wallet from the database.",
      "tags": ["wallets"],
      "params": {
        "type": "object",
        "properties": {
          "address": {
            "type": "string",
            "description": "B58 address of the wallet to delete",
            "example": "13Ya3s4k8dsbd1dey6dmiYbwk4Dk1MRFCi3RBQ7nwKnSZqnYoW5"
          }
        },
        "required": ["address"]
      },
      "result": {
        "type": "boolean",
        "description": "Returns true if the wallet was deleted",
        "example": true
      }
    },
    "wallet_list": {
      "summary": "List all wallets.",
      "description": "Lists the public keys of all wallets.",
      "tags": ["wallets"],
      "result": {
        "type": "array",
        "items": {
          "type": "string",
          "description": "The B58 encoded public address of a wallet"
        },
        "example": ["13Ya3s4k8dsbd1dey6dmiYbwk4Dk1MRFCi3RBQ7nwKnSZqnYoW5"]
      }
    },
    "wallet_unlock": {
      "summary": "Unlock a wallet for signing.",
      "description": "Unlock a wallet for signing. The wallet will be unlocked for 60 seonds.",
      "tags": ["wallets"],
      "params": {
        "type": "object",
        "properties": {
          "address": {
            "type": "string",
            "description": "B58 address of the wallet to unlock",
            "example": "13Ya3s4k8dsbd1dey6dmiYbwk4Dk1MRFCi3RBQ7nwKnSZqnYoW5"
          },
          "password": {
            "type": "string",
            "description": "Password used to decrypt the wallet",
            "example": "a password"
          }
        },
        "required": ["address", "password"]
      },
      "result": {
        "type": "boolean",
        "description": "Returns true if the wallet is unlocked",
        "example": true
      },
      "errors": [
        {
          "code": -100,
          "description": "Wallet not found"
        }
      ]
    },
    "wallet_lock": {
      "summary": "Lock a wallet.",
      "description": "Locks a previously unlocked wallet.",
      "tags": ["wallets"],
      "params": {
        "type": "object",
        "properties": {
          "address": {
            "type": "string",
            "description": "B58 address of the wallet to lock",
            "example": "13Ya3s4k8dsbd1dey6dmiYbwk4Dk1MRFCi3RBQ7nwKnSZqnYoW5"
          }
        },
        "required": ["address"]
      },
      "result": {
        "type": "boolean",
        "description": "Returns true regardless of whether the wallet is found or not",
        "example": true
      }
    },
    "wallet_is_locked": {
      "summary": "Checks if a wallet is locked.",
      "description": "Checks if a wallet is unlocked.",
      "tags": ["wallets"],
      "params": {
        "type": "object",
        "properties": {
          "address": {
            "type": "string",
            "description": "B58 address of the wallet to check",
            "example": "13Ya3s4k8dsbd1dey6dmiYbwk4Dk1MRFCi3RBQ7nwKnSZqnYoW5"
          }
        },
        "required": ["address"]
      },
      "result": {
        "type": "boolean",
        "description": "Returns true if the wallet is locked or uknown",
        "example": true
      }
    },
    "wallet_pay": {
      "summary": "Send a payment to another account.",
      "description": "Sends a single payment in bones to a given account address. Note that 1 HNT it 100_000_000 bones",
      "tags": ["wallets"],
      "params": {
        "type": "object",
        "properties": {
          "address": {
            "type": "string",
            "description": "B58 address of the payer wallet",
            "example": "13Ya3s4k8dsbd1dey6dmiYbwk4Dk1MRFCi3RBQ7nwKnSZqnYoW5"
          },
          "payee": {
            "type": "string",
            "description": "B58 address of the payee account",
            "example": "13buBykFQf5VaQtv7mWj2PBY9Lq4i1DeXhg7C4Vbu3ppzqqNkTH"
          },
          "bones": {
            "type": "integer",
            "description": "Amount in bones to send. Must be specified if \"max\" = false.",
            "example": 1000
          },
          "token_type": {
            "type": "string",
            "description": "Token type to send. [hnt, mobile, iot, hst. Default: hnt]",
            "example": "hnt"
          },
          "max": {
            "type": "boolean",
            "description": "If true, send entire wallet balance rather than specific amount.",
            "example": "false"
          },
          "nonce": {
            "type": "integer",
            "description": "Nonce to use for transaction",
            "example": 422
          }
        },
        "required": ["address", "payee"]
      },
      "result": {
        "$ref": "#/definitions/transaction"
      },
      "errors": [
        {
          "code": -100,
          "description": "Wallet not found or locked"
        }
      ]
    },
    "wallet_pay_multi": {
      "summary": "Send multiple paymens in a single transation.",
      "description": "Sends multiple payments in bones to one or more payees. Note that 1 HNT it 100_000_000 bones",
      "tags": ["wallets"],
      "params": {
        "type": "object",
        "properties": {
          "address": {
            "type": "string",
            "description": "B58 address of the payer wallet"
          },
          "payments": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "payee": {
                  "type": "string",
                  "description": "B58 address of the payee account"
                },
                "bones": {
                  "type": "integer",
                  "description": "Amount in bones to send. Must be specified if \"max\" = false"
                },
                "token_type": {
                  "type": "string",
                  "description": "Token type to send. [hnt, mobile, iot, hst. Default: hnt]",
                  "example": "hnt"
                },
                "max": {
                  "type": "boolean",
                  "description": "If true, send entire wallet balance rather than specific amount. Only one payment entry per token type can have \"max\" set to true.",
                  "example": "false"
                }
              }
            }
          }
        },
        "required": ["address", "payments"]
      },
      "result": {
        "$ref": "#/definitions/transaction"
      },
      "errors": [
        {
          "code": -100,
          "description": "Wallet not found or locked"
        }
      ]
    },
    "wallet_import": {
      "summary": "Import an encrypted wallet.",
      "description": "Import an encrypted wallet into the wallet database. The password is only used to verify that the wallet can be unlocked and is not stored.",
      "tags": ["wallets"],
      "params": {
        "type": "object",
        "properties": {
          "password": {
            "type": "string",
            "description": "Password used to decrypt the wallet",
            "example": "a password"
          },
          "path": {
            "type": "string",
            "description": "Path to the file to import the wallet from"
          }
        },
        "required": ["password", "path"]
      },
      "result": {
        "type": "string",
        "description": "The public key of the wallet"
      },
      "errors": [
        {
          "code": -100,
          "description": "Wallet file not found"
        },
        {
          "code": -110,
          "description": "Invalid password for wallet"
        }
      ]
    },
    "wallet_export": {
      "summary": "Export an encrypted wallet to a given path.",
      "description": "Exports an encrypted wallet to the given path.",
      "tags": ["wallets"],
      "params": {
        "type": "object",
        "properties": {
          "address": {
            "type": "string",
            "description": "B58 address of the payer wallet"
          },
          "path": {
            "type": "string",
            "description": "Path to the file to save the wallet to"
          }
        },
        "required": ["address", "path"]
      },
      "errors": [
        {
          "code": -100,
          "description": "Wallet not found"
        }
      ]
    },
    "wallet_export_secret": {
      "summary": "Export the secret key bytes for a wallet to a given path.",
      "description": "Exports the secret keybytes of a given unlocked wallet to the given path.",
      "tags": ["wallets"],
      "params": {
        "type": "object",
        "properties": {
          "address": {
            "type": "string",
            "description": "B58 address of the wallet"
          },
          "path": {
            "type": "string",
            "description": "Path to the file to save the export to"
          }
        },
        "required": ["address", "path"]
      },
      "errors": [
        {
          "code": -100,
          "description": "Wallet not found"
        }
      ]
    },
    "wallet_backup_list": {
      "summary": "Lists information on the list of backups in the given path.",
      "description": "Backup list information includes the backup ID, size, and the time the backup was created.",
      "tags": ["wallets", "backups"],
      "params": {
        "type": "object",
        "properties": {
          "path": {
            "type": "string",
            "description": "Path to the backup folder"
          }
        },
        "required": ["path"]
      },
      "result": {
        "type": "array",
        "items": {
          "$ref": "#/definitions/backup_info"
        }
      }
    },
    "wallet_backup_create": {
      "summary": "Creates a backup of the wallet database.",
      "description": "Creates a backup of the backup database in the given path.",
      "tags": ["wallets", "backups"],
      "params": {
        "type": "object",
        "properties": {
          "path": {
            "type": "string",
            "description": "Path to the backup folder"
          },
          "max_backups": {
            "type": "integer",
            "description": "Maximum number of backups to maintain in the folder"
          }
        },
        "required": ["path", "max_backups"]
      },
      "result": {
        "$ref": "#/definitions/backup_info"
      }
    },
    "wallet_backup_delete": {
      "summary": "Delete a backup.",
      "description": "Delete the backup with the given ID from the given backup path.",
      "tags": ["wallets", "backups"],
      "params": {
        "type": "object",
        "properties": {
          "path": {
            "type": "string",
            "description": "Path to the backup folder"
          },
          "backup_id": {
            "type": "integer",
            "description": "Backup ID to delete"
          }
        },
        "required": ["path", "backup_id"]
      },
      "result": {
        "type": "boolean",
        "description": "True if the backup was deleted succesfully"
      },
      "errors": [
        {
          "code": -100,
          "description": "Backup not found"
        }
      ]
    },
    "wallet_backup_restore": {
      "summary": "Restore the wallet database.",
      "description": "Restores the wallet database from the backup ID in the given backup folder.",
      "tags": ["wallets", "backups"],
      "params": {
        "type": "object",
        "properties": {
          "path": {
            "type": "string",
            "description": "Path to the backup folder"
          },
          "backup_id": {
            "type": "integer",
            "description": "Backup ID to restore from"
          }
        },
        "required": ["path", "backup_id"]
      },
      "result": {
        "type": "boolean",
        "description": "True if the backup was restored succesfully"
      },
      "errors": [
        {
          "code": -100,
          "description": "Backup not found"
        }
      ]
    }
  }
}
